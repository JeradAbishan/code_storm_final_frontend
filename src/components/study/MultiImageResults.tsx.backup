"use client";

import { useState } from "react";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Progress } from "@/components/ui/progress";
import { Alert, AlertDescription } from "@/components/ui/alert";
import { Separator } from "@/components/ui/separator";
import { ScrollArea } from "@/components/ui/scroll-area";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { EnhancedMarkdownRenderer } from "@/components/ui/enhanced-markdown-renderer";
import {
  Network,
  FileImage,
  BookOpen,
  Brain,
  Target,
  Clock,
  CheckCircle,
  AlertTriangle,
  ArrowRight,
  Zap,
  Calculator,
  ChevronDown,
  ChevronRight,
  RefreshCw,
  Download,
  Share,
  Eye,
  BarChart3,
  TreePine,
  Link as LinkIcon,
  Users,
} from "lucide-react";
import { type MultiImageAnalysisResult } from "@/lib/api-client";
import { cn } from "@/lib/utils";

interface MultiImageResultsProps {
  result: MultiImageAnalysisResult;
  onRetry?: () => void;
  className?: string;
}

export function MultiImageResults({
  result,
  onRetry,
  className,
}: MultiImageResultsProps) {
  const [activeImageId, setActiveImageId] = useState<string | null>(null);
  const [expandedSections, setExpandedSections] = useState<Set<string>>(new Set(['overview']));

  const toggleSection = (section: string) => {
    const newExpanded = new Set(expandedSections);
    if (newExpanded.has(section)) {
      newExpanded.delete(section);
    } else {
      newExpanded.add(section);
    }
    setExpandedSections(newExpanded);
  };

  const getConnectivityColor = (confidence: number) => {
    if (confidence >= 0.8) return "text-green-600 bg-green-100 dark:bg-green-900/20";
    if (confidence >= 0.6) return "text-blue-600 bg-blue-100 dark:bg-blue-900/20";
    if (confidence >= 0.4) return "text-yellow-600 bg-yellow-100 dark:bg-yellow-900/20";
    return "text-gray-600 bg-gray-100 dark:bg-gray-900/20";
  };

  const getContentTypeIcon = (contentType: string) => {
    switch (contentType.toLowerCase()) {
      case 'mathematical':
        return <Calculator className="h-4 w-4" />;
      case 'diagram':
        return <BarChart3 className="h-4 w-4" />;
      case 'scientific':
        return <Brain className="h-4 w-4" />;
      default:
        return <FileImage className="h-4 w-4" />;
    }
  };

  const formatProcessingTime = (seconds: number) => {
    if (seconds < 60) return `${Math.round(seconds)}s`;
    return `${Math.floor(seconds / 60)}m ${Math.round(seconds % 60)}s`;
  };

  const strongConnections = analysis.connectivity_map.filter(conn => conn.confidence > 0.6);
  const averageConfidence = analysis.processing_metadata.average_confidence;

  return (
    <div className={cn("w-full space-y-6", className)}>
      {/* Header */}
      <Card className="bg-gradient-to-r from-blue-50 to-purple-50 dark:from-blue-900/20 dark:to-purple-900/20 border-blue-200 dark:border-blue-800">
        <CardHeader>
          <div className="flex items-center justify-between">
            <div>
              <CardTitle className="flex items-center gap-2 text-blue-700 dark:text-blue-300">
                <Network className="h-6 w-6" />
                Multi-Image Analysis Complete
              </CardTitle>
              <CardDescription className="text-blue-600 dark:text-blue-400">
                Processed {analysis.processing_metadata.total_images} images with comprehensive connectivity analysis
              </CardDescription>
            </div>
            <div className="flex gap-2">
              <Button onClick={onRetry} variant="outline" size="sm">
                <RefreshCw className="h-4 w-4 mr-1" />
                Process New
              </Button>
            </div>
          </div>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
            <div className="text-center">
              <div className="text-2xl font-bold text-blue-600 dark:text-blue-400">
                {analysis.processing_metadata.total_images}
              </div>
              <div className="text-sm text-blue-500">Images Processed</div>
            </div>
            <div className="text-center">
              <div className="text-2xl font-bold text-green-600 dark:text-green-400">
                {strongConnections.length}
              </div>
              <div className="text-sm text-green-500">Strong Connections</div>
            </div>
            <div className="text-center">
              <div className="text-2xl font-bold text-purple-600 dark:text-purple-400">
                {Math.round(averageConfidence * 100)}%
              </div>
              <div className="text-sm text-purple-500">Avg Confidence</div>
            </div>
            <div className="text-center">
              <div className="text-2xl font-bold text-orange-600 dark:text-orange-400">
                {formatProcessingTime(analysis.processing_metadata.processing_time)}
              </div>
              <div className="text-sm text-orange-500">Processing Time</div>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Main Content Tabs */}
      <Tabs defaultValue="overview" className="w-full">
        <TabsList className="grid w-full grid-cols-5">
          <TabsTrigger value="overview" className="flex items-center gap-1">
            <Eye className="h-4 w-4" />
            Overview
          </TabsTrigger>
          <TabsTrigger value="connectivity" className="flex items-center gap-1">
            <Network className="h-4 w-4" />
            Connectivity
          </TabsTrigger>
          <TabsTrigger value="content" className="flex items-center gap-1">
            <BookOpen className="h-4 w-4" />
            Content
          </TabsTrigger>
          <TabsTrigger value="study" className="flex items-center gap-1">
            <Target className="h-4 w-4" />
            Study Materials
          </TabsTrigger>
          <TabsTrigger value="images" className="flex items-center gap-1">
            <FileImage className="h-4 w-4" />
            Images
          </TabsTrigger>
        </TabsList>

        {/* Overview Tab */}
        <TabsContent value="overview" className="space-y-6">
          {/* Global Summary */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <BookOpen className="h-5 w-5 text-green-500" />
                Global Summary
              </CardTitle>
            </CardHeader>
            <CardContent>
              <EnhancedMarkdownRenderer
                content={analysis.global_summary}
                enableMath={true}
                enableSupersub={true}
                className="prose dark:prose-invert max-w-none"
              />
            </CardContent>
          </Card>

          {/* Content Classification */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <BarChart3 className="h-5 w-5 text-purple-500" />
                Content Classification
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <h4 className="font-medium mb-3">Structure Analysis</h4>
                  <div className="space-y-2">
                    <div className="flex justify-between">
                      <span>Structure Type:</span>
                      <Badge variant="outline">
                        {analysis.content_classification.structure_type.replace('_', ' ')}
                      </Badge>
                    </div>
                    <div className="flex justify-between">
                      <span>Mathematical Content:</span>
                      <Badge variant={analysis.content_classification.mathematical_content ? "default" : "secondary"}>
                        {analysis.content_classification.mathematical_content ? "Yes" : "No"}
                      </Badge>
                    </div>
                    <div className="flex justify-between">
                      <span>Has Diagrams:</span>
                      <Badge variant={analysis.content_classification.has_diagrams ? "default" : "secondary"}>
                        {analysis.content_classification.has_diagrams ? "Yes" : "No"}
                      </Badge>
                    </div>
                    <div className="flex justify-between">
                      <span>Connectivity Strength:</span>
                      <Badge className={getConnectivityColor(analysis.content_classification.connectivity_strength)}>
                        {Math.round(analysis.content_classification.connectivity_strength * 100)}%
                      </Badge>
                    </div>
                  </div>
                </div>

                <div>
                  <h4 className="font-medium mb-3">Content Distribution</h4>
                  <div className="space-y-2">
                    {Object.entries(analysis.content_classification.content_distribution).map(([type, count]) => (
                      <div key={type} className="flex items-center justify-between">
                        <div className="flex items-center gap-2">
                          {getContentTypeIcon(type)}
                          <span className="capitalize">{type.replace('_', ' ')}</span>
                        </div>
                        <Badge variant="outline">{count} image{count !== 1 ? 's' : ''}</Badge>
                      </div>
                    ))}
                  </div>
                </div>
              </div>

              {/* Main Topics */}
              <div>
                <h4 className="font-medium mb-3">Main Topics Identified</h4>
                <div className="flex flex-wrap gap-2">
                  {analysis.content_classification.main_topics.slice(0, 10).map((topic, index) => (
                    <Badge key={index} variant="secondary">
                      {topic}
                    </Badge>
                  ))}
                </div>
              </div>
            </CardContent>
          </Card>

          {/* Mathematical Content Map */}
          {Object.keys(analysis.mathematical_content_map).length > 0 && (
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Calculator className="h-5 w-5 text-blue-500" />
                  Mathematical Content Map
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  {Object.entries(analysis.mathematical_content_map).map(([filename, expressions]) => (
                    <div key={filename} className="border rounded-lg p-4">
                      <h5 className="font-medium mb-2 flex items-center gap-2">
                        <FileImage className="h-4 w-4" />
                        {filename}
                      </h5>
                      <div className="space-y-2">
                        {expressions.map((expr, index) => (
                          <div key={index} className="bg-gray-50 dark:bg-gray-900 rounded p-2 font-mono text-sm">
                            {expr}
                          </div>
                        ))}
                      </div>
                    </div>
                  ))}
                </div>
              </CardContent>
            </Card>
          )}
        </TabsContent>

        {/* Connectivity Tab */}
        <TabsContent value="connectivity" className="space-y-6">
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Network className="h-5 w-5 text-blue-500" />
                Content Connectivity Analysis
              </CardTitle>
              <CardDescription>
                Relationships and connections discovered between images
              </CardDescription>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                {/* Connectivity Stats */}
                <div className="grid grid-cols-3 gap-4 mb-6">
                  <div className="text-center p-4 bg-blue-50 dark:bg-blue-900/20 rounded-lg">
                    <div className="text-2xl font-bold text-blue-600 dark:text-blue-400">
                      {analysis.connectivity_map.length}
                    </div>
                    <div className="text-sm text-blue-500">Total Connections</div>
                  </div>
                  <div className="text-center p-4 bg-green-50 dark:bg-green-900/20 rounded-lg">
                    <div className="text-2xl font-bold text-green-600 dark:text-green-400">
                      {strongConnections.length}
                    </div>
                    <div className="text-sm text-green-500">Strong Connections</div>
                  </div>
                  <div className="text-center p-4 bg-purple-50 dark:bg-purple-900/20 rounded-lg">
                    <div className="text-2xl font-bold text-purple-600 dark:text-purple-400">
                      {Math.round(analysis.processing_metadata.connectivity_strength * 100)}%
                    </div>
                    <div className="text-sm text-purple-500">Overall Strength</div>
                  </div>
                </div>

                {/* Connection List */}
                <ScrollArea className="h-96 w-full">
                  <div className="space-y-3">
                    {analysis.connectivity_map
                      .sort((a, b) => b.confidence - a.confidence)
                      .map((connection, index) => {
                        const sourceImage = analysis.images.find(img => img.image_id === connection.source_id);
                        const targetImage = analysis.images.find(img => img.image_id === connection.target_id);
                        
                        return (
                          <Card key={index} className="p-4">
                            <div className="flex items-center justify-between mb-3">
                              <div className="flex items-center gap-3">
                                <div className="text-sm font-medium">
                                  {sourceImage?.filename || 'Unknown'} → {targetImage?.filename || 'Unknown'}
                                </div>
                                <Badge className={getConnectivityColor(connection.confidence)}>
                                  {Math.round(connection.confidence * 100)}% confidence
                                </Badge>
                              </div>
                              <Badge variant="outline">
                                {connection.connectivity_type.replace('_', ' ')}
                              </Badge>
                            </div>
                            
                            {connection.reasoning && (
                              <p className="text-sm text-gray-600 dark:text-gray-400 mb-2">
                                {connection.reasoning}
                              </p>
                            )}
                            
                            {connection.shared_concepts.length > 0 && (
                              <div className="flex flex-wrap gap-1">
                                {connection.shared_concepts.slice(0, 5).map((concept, i) => (
                                  <Badge key={i} variant="secondary" className="text-xs">
                                    {concept}
                                  </Badge>
                                ))}
                              </div>
                            )}
                          </Card>
                        );
                      })}
                  </div>
                </ScrollArea>
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        {/* Content Tab */}
        <TabsContent value="content" className="space-y-6">
          {/* Topic Hierarchy */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <TreePine className="h-5 w-5 text-green-500" />
                Topic Hierarchy
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                {Object.entries(analysis.topic_hierarchy).map(([groupName, groupData]: [string, any]) => (
                  <div key={groupName} className="border rounded-lg p-4">
                    <h4 className="font-medium mb-3 flex items-center gap-2">
                      <Users className="h-4 w-4" />
                      {groupName.replace('_', ' ')}
                    </h4>
                    
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <div>
                        <h5 className="text-sm font-medium mb-2">Main Concepts</h5>
                        <div className="flex flex-wrap gap-1">
                          {groupData.main_concepts?.map((concept: string, index: number) => (
                            <Badge key={index} variant="outline" className="text-xs">
                              {concept}
                            </Badge>
                          ))}
                        </div>
                      </div>
                      
                      <div>
                        <h5 className="text-sm font-medium mb-2">Content Types</h5>
                        <div className="flex flex-wrap gap-1">
                          {groupData.content_types?.map((type: string, index: number) => (
                            <Badge key={index} variant="secondary" className="text-xs">
                              {type.replace('_', ' ')}
                            </Badge>
                          ))}
                        </div>
                      </div>
                    </div>
                    
                    {groupData.page_range && (
                      <div className="mt-3 text-sm text-gray-600 dark:text-gray-400">
                        Pages: {groupData.page_range[0]} - {groupData.page_range[1]}
                      </div>
                    )}
                  </div>
                ))}
              </div>
            </CardContent>
          </Card>

          {/* Suggested Study Order */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Target className="h-5 w-5 text-orange-500" />
                Suggested Study Order
              </CardTitle>
              <CardDescription>
                Recommended sequence for optimal learning progression
              </CardDescription>
            </CardHeader>
            <CardContent>
              <div className="space-y-3">
                {analysis.suggested_study_order.map((imageId, index) => {
                  const image = analysis.images.find(img => img.image_id === imageId);
                  return (
                    <div key={imageId} className="flex items-center gap-4 p-3 border rounded-lg">
                      <div className="flex items-center justify-center w-8 h-8 bg-blue-100 dark:bg-blue-900 rounded-full text-blue-600 dark:text-blue-400 font-bold">
                        {index + 1}
                      </div>
                      <div className="flex-1">
                        <div className="font-medium">{image?.filename || 'Unknown'}</div>
                        <div className="text-sm text-gray-600 dark:text-gray-400">
                          {image?.content_type.replace('_', ' ')} • {Math.round((image?.confidence_score || 0) * 100)}% confidence
                        </div>
                      </div>
                      <div className="flex items-center gap-2">
                        {getContentTypeIcon(image?.content_type || '')}
                        <Badge variant="outline" className="text-xs">
                          {image?.key_concepts.length || 0} concepts
                        </Badge>
                      </div>
                      {index < analysis.suggested_study_order.length - 1 && (
                        <ArrowRight className="h-4 w-4 text-gray-400" />
                      )}
                    </div>
                  );
                })}
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        {/* Study Materials Tab */}
        <TabsContent value="study" className="space-y-6">
          {/* Summary */}
          {analysis.summary && (
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <BookOpen className="h-5 w-5 text-blue-500" />
                  Comprehensive Summary
                </CardTitle>
                <CardDescription>
                  {analysis.summary.confidence && (
                    <Badge variant="outline">
                      {Math.round(analysis.summary.confidence * 100)}% confidence
                    </Badge>
                  )}
                </CardDescription>
              </CardHeader>
              <CardContent>
                <EnhancedMarkdownRenderer
                  content={analysis.summary.content}
                  enableMath={true}
                  enableSupersub={true}
                  className="prose dark:prose-invert max-w-none"
                />
                
                {analysis.summary.key_points && analysis.summary.key_points.length > 0 && (
                  <div className="mt-6">
                    <h4 className="font-medium mb-3">Key Points</h4>
                    <div className="space-y-2">
                      {analysis.summary.key_points.map((point, index) => (
                        <div key={index} className="flex items-start gap-2">
                          <CheckCircle className="h-4 w-4 text-green-500 mt-0.5 flex-shrink-0" />
                          <span className="text-sm">{point}</span>
                        </div>
                      ))}
                    </div>
                  </div>
                )}
              </CardContent>
            </Card>
          )}

          {/* Explanation */}
          {analysis.explanation && (
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Brain className="h-5 w-5 text-purple-500" />
                  Detailed Explanation
                </CardTitle>
                <CardDescription>
                  {analysis.explanation.confidence && (
                    <Badge variant="outline">
                      {Math.round(analysis.explanation.confidence * 100)}% confidence
                    </Badge>
                  )}
                </CardDescription>
              </CardHeader>
              <CardContent>
                <EnhancedMarkdownRenderer
                  content={analysis.explanation.content}
                  enableMath={true}
                  enableSupersub={true}
                  className="prose dark:prose-invert max-w-none"
                />
              </CardContent>
            </Card>
          )}

          {/* Quiz */}
          {analysis.quiz && (
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Target className="h-5 w-5 text-green-500" />
                  Comprehensive Quiz
                </CardTitle>
                <CardDescription>
                  {analysis.quiz.questions.length} questions covering all analyzed content
                  {analysis.quiz.confidence && (
                    <Badge variant="outline" className="ml-2">
                      {Math.round(analysis.quiz.confidence * 100)}% confidence
                    </Badge>
                  )}
                </CardDescription>
              </CardHeader>
              <CardContent>
                <div className="space-y-6">
                  {analysis.quiz.questions.map((question, index) => (
                    <div key={index} className="border rounded-lg p-4">
                      <div className="flex items-start gap-3 mb-3">
                        <div className="flex items-center justify-center w-6 h-6 bg-blue-100 dark:bg-blue-900 rounded-full text-blue-600 dark:text-blue-400 text-sm font-bold">
                          {index + 1}
                        </div>
                        <div className="flex-1">
                          <h5 className="font-medium mb-2">{question.question}</h5>
                          <Badge variant="outline" className="text-xs">
                            {question.question_type.replace('_', ' ')}
                          </Badge>
                        </div>
                      </div>

                      {question.options && question.options.length > 0 && (
                        <div className="ml-9 space-y-2 mb-3">
                          {question.options.map((option, optIndex) => (
                            <div
                              key={optIndex}
                              className={cn(
                                "p-2 rounded border text-sm",
                                option === question.correct_answer
                                  ? "bg-green-50 dark:bg-green-900/20 border-green-200 dark:border-green-800"
                                  : "bg-gray-50 dark:bg-gray-900 border-gray-200 dark:border-gray-700"
                              )}
                            >
                              {String.fromCharCode(65 + optIndex)}. {option}
                              {option === question.correct_answer && (
                                <CheckCircle className="h-4 w-4 text-green-500 inline ml-2" />
                              )}
                            </div>
                          ))}
                        </div>
                      )}

                      {question.explanation && (
                        <div className="ml-9 p-3 bg-blue-50 dark:bg-blue-900/20 rounded text-sm">
                          <strong>Explanation:</strong> {question.explanation}
                        </div>
                      )}
                    </div>
                  ))}
                </div>
              </CardContent>
            </Card>
          )}
        </TabsContent>

        {/* Images Tab */}
        <TabsContent value="images" className="space-y-6">
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <FileImage className="h-5 w-5 text-indigo-500" />
                Individual Image Analysis
              </CardTitle>
              <CardDescription>
                Detailed analysis results for each processed image
              </CardDescription>
            </CardHeader>
            <CardContent>
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                {analysis.images.map((image, index) => (
                  <Card 
                    key={image.image_id} 
                    className={cn(
                      "cursor-pointer transition-colors hover:bg-gray-50 dark:hover:bg-gray-800/50",
                      activeImageId === image.image_id && "ring-2 ring-blue-500"
                    )}
                    onClick={() => setActiveImageId(activeImageId === image.image_id ? null : image.image_id)}
                  >
                    <CardHeader className="pb-3">
                      <CardTitle className="text-sm flex items-center gap-2">
                        <div className="flex items-center justify-center w-6 h-6 bg-blue-100 dark:bg-blue-900 rounded-full text-blue-600 dark:text-blue-400 text-xs font-bold">
                          {index + 1}
                        </div>
                        {image.filename}
                      </CardTitle>
                    </CardHeader>
                    <CardContent className="space-y-3">
                      <div className="flex items-center justify-between">
                        <div className="flex items-center gap-2">
                          {getContentTypeIcon(image.content_type)}
                          <span className="text-sm capitalize">{image.content_type.replace('_', ' ')}</span>
                        </div>
                        <Badge className={getConnectivityColor(image.confidence_score)}>
                          {Math.round(image.confidence_score * 100)}%
                        </Badge>
                      </div>

                      <div className="text-xs text-gray-500">
                        {image.extracted_text.length} characters extracted
                      </div>

                      {image.key_concepts.length > 0 && (
                        <div>
                          <div className="text-xs font-medium mb-1">Key Concepts:</div>
                          <div className="flex flex-wrap gap-1">
                            {image.key_concepts.slice(0, 3).map((concept, i) => (
                              <Badge key={i} variant="secondary" className="text-xs">
                                {concept}
                              </Badge>
                            ))}
                            {image.key_concepts.length > 3 && (
                              <Badge variant="outline" className="text-xs">
                                +{image.key_concepts.length - 3} more
                              </Badge>
                            )}
                          </div>
                        </div>
                      )}

                      {image.mathematical_expressions.length > 0 && (
                        <div className="flex items-center gap-1 text-xs text-blue-600 dark:text-blue-400">
                          <Calculator className="h-3 w-3" />
                          {image.mathematical_expressions.length} math expressions
                        </div>
                      )}

                      {activeImageId === image.image_id && (
                        <div className="pt-3 border-t">
                          <ScrollArea className="h-24 w-full">
                            <p className="text-xs text-gray-600 dark:text-gray-400">
                              {image.extracted_text.slice(0, 200)}
                              {image.extracted_text.length > 200 && '...'}
                            </p>
                          </ScrollArea>
                        </div>
                      )}
                    </CardContent>
                  </Card>
                ))}
              </div>
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>
    </div>
  );
}
